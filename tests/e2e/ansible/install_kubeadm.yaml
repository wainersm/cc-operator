# Copyright Confidential Containers Contributors
#
# SPDX-License-Identifier: Apache-2.0
#
# Install kubeadm and everything else needed to bring up a single node
# k8s cluster.
#
---
- hosts: all
  become: yes
  vars:
    cni_home: "/opt/cni"
    cni_version: "v1.1.1"
    flannel_home: "/opt/flannel"
    flannel_version: "v0.19.1"
    kubeadm_cri_runtime_socket: "/run/{{ container_runtime }}/{{ container_runtime }}.sock"
    kubeadm_conf_dir: "/etc/kubeadm"
    kubelet_bin: "/usr/local/bin/kubelet"
    kubelet_service_dir: "/etc/systemd/system/kubelet.service.d"
    kubelet_service_file: "/etc/systemd/system/kubelet.service"
    # Use 'cgroupfs' with containerd, 'systemd' with crio?
    kubelet_cgroup_driver: "cgroupfs"
  tasks:
    - name: Install kubeadm required packages
      package:
        name: "{{ kubeadm_pkgs[ansible_distribution | lower] }}"
        state: present
    - name: Create CNI home directory
      file:
        path: "{{ cni_home }}/bin"
        state: directory
    - name: Download CNI plugins
      get_url:
        url: "https://github.com/containernetworking/plugins/releases/download/{{ cni_version }}/cni-plugins-linux-{{ target_arch  }}-{{ cni_version }}.tgz"
        dest: /tmp/cni-plugins.tgz
      retries: 3
      delay: 10
    - name: Install CNI plugins
      unarchive:
        # TODO: use facts
        src: /tmp/cni-plugins.tgz
        dest: "{{ cni_home }}/bin"
        remote_src: yes
    - name: Download crictl
      get_url:
        url: "https://github.com/kubernetes-sigs/cri-tools/releases/download/{{ k8s_version }}/crictl-{{ k8s_version }}-linux-{{ target_arch  }}.tar.gz"
        dest: /tmp/crictl.tar.gz
      retries: 3
      delay: 10
    - name: Install crictl
      unarchive:
        src: /tmp/crictl.tar.gz
        creates: /usr/local/bin/crictl
        dest: /usr/local/bin
        remote_src: yes
    - name: Install kube binaries
      get_url:
        url: https://storage.googleapis.com/kubernetes-release/release/{{ k8s_version }}/bin/linux/{{ target_arch  }}/{{ item }}
        dest: /usr/local/bin
        mode: '+x'
      retries: 3
      delay: 10
      with_items:
        - kubeadm
        - kubelet
        - kubectl
    - name: Remove zram-generator-defaults in Fedora
      ansible.builtin.yum:
        name: zram-generator-defaults
        state: absent
      when: ansible_distribution == "Fedora"
    - name: Disable swap
      shell: |
        [ -z "$(swapon --show)" ] && exit 0
        swapoff --all && exit 1
        exit 2
      register: result
      changed_when: result.rc == 1
      failed_when: result.rc > 1
    - name: Disable swap in fstab
      replace:
        path: /etc/fstab
        regexp: '^([^#\s]+\s+){2}swap\s'
        replace: '# \1'
    - name: Create kubelet service
      template:
        src: kubelet.service.j2
        dest: "{{ kubelet_service_file }}"
      vars:
        kubelet_bin: /usr/local/bin/kubelet
    - name: Create kubelet.service.d directory
      file:
        path: "{{ kubelet_service_dir }}"
        state: directory
    - name: Create kubeadm service config
      template:
        src: 10-kubeadm.conf.j2
        dest: "{{ kubelet_service_dir }}/10-kubeadm.conf"
      vars:
        kubelet_bin: /usr/local/bin/kubelet
    - name: Create kubeadm configuration directory
      file:
        path: "{{ kubeadm_conf_dir }}"
        state: directory
    - name: Create kubeadm configuration file
      template:
        src: kubeadm.conf.j2
        dest: "{{ kubeadm_conf_dir }}/kubeadm.conf"
    - name: Reload systemd configuration
      systemd:
        daemon_reload: yes
    - name: Start kubelet service
      service:
        name: kubelet
        enabled: yes
        state: started
    - name: Create flannel home directory
      file:
        path: "{{ flannel_home }}"
        state: directory
    - name: Create flannel deployment file
      template:
        src: kube-flannel.yaml.j2
        dest: "{{ flannel_home }}/kube-flannel.yaml"
    #
    # Undo the kubeadm installation. Assume that ../cluster/down.sh is executed
    # before.
    #
    - name: Uninstall kubeadm
      tags: undo
      block:
        - name: Uninstall flannel
          file:
            path: "{{ flannel_home }}"
            state: absent
        - name: Check kubelet is installed
          shell: systemctl list-unit-files | grep kubelet
          register: kubelet_exist
          ignore_errors: yes
        - name: Stop kubelet service
          service:
            name: kubelet
            state: stopped
          when: kubelet_exist.rc == 0
        - name: Delete kubelet service files
          file:
            path: "{{ item }}"
            state: absent
          with_items:
            - "{{ kubelet_service_file }}"
            - "{{ kubelet_service_dir }}"
        - name: Delete the kubeadm configuration directory
          file:
            path: "{{ kubeadm_conf_dir }}"
            state: absent
        - name: Remove kube binaries
          file:
            path: "/usr/local/bin/{{ item }}"
            state: absent
          with_items:
            - crictl
            - kubeadm
            - kubectl
            - kubelet
        - name: Uninstall cni
          file:
            path: "{{ cni_home }}"
            state: absent
        # TODO: what to do with swap?
